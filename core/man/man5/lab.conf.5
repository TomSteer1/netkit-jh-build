.TH LAB.CONF 5 2022-09-03 Linux "Netkit-JH Manual"
.SH NAME
lab.conf \- configuration of a Netkit-JH lab
.SH SYNOPSIS
.nf
.B lab.conf

.IB MACHINE /
.IB MACHINE .startup

.B shared/
.B shared.startup

.BR lab.dep " (see " \c
.BR lab.dep (5))

.BR _test/results/ \fIMACHINE\fR .default " (see " \c
.BR ltest (1))
.BI _test/results/ MACHINE .shared
.BI _test/results/ MACHINE .user
.BI _test/scripts/ MACHINE .test
.B _test/scripts/shared.test
.fi
.SH DESCRIPTION
This page describes the files involved in the setup of a Netkit-JH lab.
A Netkit-JH lab is defined as an arbitrary directory containing some special
files and subdirectories.
Unless otherwise stated, all files mentioned here are located inside the lab
directory.
.PP
See
.B EXAMPLES
for a demonstration directory structure and lab configuration.
.SS Declaring a machine
From here on out, a machine's hostname will be denoted as
.IR MACHINE .
The hostname must follow Debian's convention set out in
.BR hostname (7),
which is enforced by the
.B hostname_regex
variable in
.RI \fBNETKIT_HOME\fR /bin/script_utils .
This is also RFC-compliant.
The hostname must therefore
.RS
.IP \[bu] 4
only contain alphanumeric characters and the hyphen (minus);
.IP \[bu]
not start or end with a hyphen (minus); and
.IP \[bu]
be 1 to 63 characters long.
.RE
.PP
The hostnames are case-insensitive.
A machine can also not be named \(dqshared\(dq or \(dq_test\(dq,
for reasons discussed later in this document.
.TP
.RI MACHINE /
Each subdirectory represents a virtual machine to be started,
which will have a hostname the same as the subdirectory name.
Unless otherwise specified,
just the existence of a subdirectory causes a virtual machine to get launched,
even if the subdirectory is empty.
Because the
.IR shared/ " and " _test/
directories are for special functionality (discussed later in this document),
machines cannot be named \(dqshared\(dq or \(dq_test\(dq, respectively.
.IP
Machine directories may contain files that you wish to make available (i.e.,
copy) inside the virtual machine filesystem.
A full hierarchy of directories can be created, where the root of the tree is
.RI MACHINE / .
For example, the file
.RI MACHINE /etc/foobar
will be copied into
.I /etc/foobar
of the virtual machine's filesystem.
Files inside this directory overwrite existing ones in the model filesystem;
they are also prioritised over those in
.IR shared/ .
.SS Configuring machines
Virtual machines can be given network interfaces and their boot attributes
(memory, kernel image, filesystem image, etc.) can be changed from the defaults
set in the Netkit-JH configuration file (see
.BR netkit.conf (5)).
.TP
.I lab.conf
Every parameter of
.BR vstart (1)
can be modified in this file, per machine.
This file must therefore be used to define the network topology of the lab.
All lines starting with an invalid assignment are ignored by the parser,
therefore comments can be made without any specific delimiter.
A nice method to avoid conflicts with hostnames and lab variables is to use an
invalid hostname character before the comment, like \(dq#\(dq.
Note: whitespace in
.I lab.conf
is not ignored (there are no quoting or escaping rules).
.IP
The configuration file is a list of
.IR MACHINE [ OPTION ]= VALUE
assignments, where
.I OPTION
is the name of a
.BR vstart (1)
short or long option.
This corresponds to running:
.nf
.RS
.IP
.BR vstart " " \c
.RI \-\- OPTION = VALUE " " MACHINE
.RE
.fi
.IP
For options not requiring a value, simply omit
.I VALUE
(but keep the equals sign).
The configuration line
.IR MACHINE [ N ]= DOMAIN ,
where
.I N
is an integer,
will give the machine an
.RI \(dqeth N \(dq
network interface and attach it to the
.I DOMAIN
collision domain; this is equivalent to running:
.nf
.RS
.IP
.BR vstart " " \c
.RI \-\-eth N = DOMAIN " " MACHINE
.RE
.fi
.IP
A collision domain is a network segment created by Netkit-JH with virtual
network hubs
(socket files on the host that the UML virtual machines can interface with).
Essentially, all machines with a network interface on the same domain will be
connected with the same physical wire.
In Netkit-JH, a collision domain must comply with regular expression in
.BR collision_domain_name_regex ,
defined in
.RI \fBNETKIT_HOME\fR /bin/vcommon .
The name must
.RS
.RS
.IP \[bu] 4
only contain alphanumeric characters, the underscore, period, or hyphen
(minus) and
.IP \[bu]
be shorter than
.B UNIX_PATH_MAX
when combined with other components of the socket file's full path.
With the default values in
.BR netkit.conf (5),
this will leave roughly 55 characters for the domain name.
.RE
.RE
.IP
Like the option to
.BR vstart (1),
the
.I DOMAIN
can instead contain commas to configure a TAP interface
.RI ( DOMAIN , TAP_ADDR , GUEST_ADDR ).
This is a special setting which involves the creation of a new network
interface on the host;
it allows virtual machines to access the Internet and other external networks
the host is connected to.
See
.BR vstart (1)
for more information.
.IP
.I lab.conf
can also be used to set special variables which provide metadata for the lab.
This information is outputted to the user at the start of each lcommand.
The assignments are simple
.IR VARIABLE = VALUE
lines; the following variables are supported:
.RS
.RS
.TP
.B LAB_AUTHOR
People who have prepared the lab.
.TP
.B LAB_DESCRIPTION
A brief description of the lab.
.TP
.B LAB_EMAIL
Contact addresses of the authors.
.TP
.B LAB_VERSION
Version number of the lab.
.TP
.B LAB_WEB
Useful web resources relating to the lab.
.RE
.RE
.IP
A further special assignment is also supported,
.BR LAB_MACHINES ,
which affects how the lcommands generate a list of the lab's virtual machines.
The default behavior is to create this list from the lab's subdirectory names,
as previously explained.
The
.B LAB_MACHINES
variable, however,
is used to explicitly declare machines that comprise the lab and override the
directory listing.
It allows the user to create arbitrary utility subdirectories in the lab
directory without an lcommand mistaking them for machines.
It also gives the ability to start a virtual machine even if its corresponding
subdirectory does not exist.
The variable's value is a comma-separated list of hostnames, for example:
.nf
.RS
.IP
LAB_MACHINES=apple,banana,grape
.RE
.fi
.TP
.I lab.dep
If the dependency file exists in the lab directory, parallel startup is
implicitly enabled.
The configuration file allows the user to tell
.BR lstart (1)
what machines must be started before others.
For more information, see
.BR lab.dep (5).
.SS Machine launch and shutdown scripts
Shell scripts can be created to be ran at the end of a machine's boot phase or
the start of its shutdown phase.
The scripts are interpreted with Bash and do not need their executable bit set.
See
.I /etc/netkit/netkit-phase2
for how exactly this is implemented.
.TP
.RI MACHINE .startup
The final initialization step
(except lab testing, if enabled)
after booting a machine is running its startup script.
This shell script can contain anything.
In a Netkit-JH lab there would often be commands to bring the network
interfaces up with an IP address and configure the routing table
(since this is not done automatically).
It is useful to start services too,
since most services available on the filesystem are prevented from
automatically starting on boot.
.TP
.RI MACHINE .shutdown
The shutdown script is executed when a machine is halted or rebooted
(not crashed).
This may be useful to provide some cleanup operations.
.SS Lab testing
A Netkit-JH lab can be automatically launched with a set of scripts that output
to the
.I _test/
subdirectory of the lab directory.
Such functionality is available with the
.BR ltest (1)
command.
.TP
.IR _test/results/ MACHINE .default
.TQ
.IR _test/results/ MACHINE .shared
.TQ
.IR _test/results/ MACHINE .user
Results from the test script included with the Netkit-JH install (see
.IR /etc/netkit/netkit-test-phase ),
.IR shared.test ,
and the user-defined test script
.RI (MACHINE .test ),
respectively.
Their contents are simply the standard output of the scripts.
.TP
.IR _test/scripts/ MACHINE .test
.TQ
.IR _test/scripts/shared.test
The optional user-defined test scripts to be ran.
.RI MACHINE .test
is host-specific, whereas
.I shared.test
runs on every host.
.SS Shared configurations
.TP
.I shared/
.TQ
.I shared.startup
.TQ
.I shared.shutdown
Rather than copying configurations that should apply to every lab machine,
the user can define a shared filesystem or startup/shutdown scripts.
These operate the same as their machine-specific counterparts however take less
precendence, so their operations can be overridden
(i.e., the shared filesystem directory is copied into the machine before its
own directory, and the shared startup/shutdown scripts are ran before the
machine-specific ones).
.SH ENVIRONMENT
.TP
.B NETKIT_HOME
All Netkit-JH commands require that the
.B NETKIT_HOME
variable is set the path of the directory which Netkit-JH is installed in.
.SH FILES
.TP
.I netkit.conf
.TQ
.BI NETKIT_HOME /netkit.conf.default
Netkit-JH stores its configuration settings inside a file named
.IR netkit.conf ,
which can be placed in up to three locations to change its scope.
The default settings are assigned in
.IR netkit.conf.default ;
the existence of this file is required in order to make Netkit-JH work.
See
.BR netkit.conf (5)
for information about these files.
.SH NOTES
.SS Temporary files
When sharing a lab, be sure to remove any temporary files like
.IR .ready " files,"
.IR .testdone " files, and"
.I readyfor.test
files since they do not provide any additional data to the lab except
increasing the possiblity of launch errors.
This is with the exception of COW filesystems
.RI ( .disk " files),"
which would be desirable to keep if the lab distributor wishes to share
temporary changes to each machines' filesystem after running the lab.
Otherwise, keeping the files is a waste of space and they should be removed
with
.BR lclean (1).
.SS Whitespace
As previously mentioned,
Netkit-JH configuration files will not ignore whitespace.
If writing the lab on a Microsoft Windows system, therefore,
the user must be sure to remove stray carriage return characters if their
editor does not use UNIX-style line endings.
.SH EXAMPLES
The following is a simple demonstration Netkit-JH lab.
The lab directory can be anywhere on the machine
(assuming file permissions are as expected).
.SS Lab directory structure
This is a typical lab directory structure.
If using
.BR ltest (1),
there might be an
.I _ltest/
directory.
.PP
.RS
.nf
.I a/
.I b/
.I dhcp\-server/
.RS 4
.I etc/
.RS 4
.I dnsmasq.conf
.RE
.RE
.I router/
.I shared/
.RS 4
.I etc/
.RS 4
.I passwd
.RE
.RE
.I a.startup
.I b.startup
.I dhcp\-server.startup
.I router.startup
.I lab.conf
.I lab.dep
.I shared.startup
.fi
.RE
.SS Lab configuration
A typical
.I lab.conf
file could look like this, where the \(dqrouter\(dq machine has two network
interfaces.
The \(dqdhcp\-server\(dq has been given 256 MB of memory instead of the default
128 MB (note that increasing the memory is rarely required for low intensity
applications).
.PP
.RS 4
.I lab.conf
.RE
.RS
.nf
a[0]=CD1
dhcp\-server[0]=CD1

router[0]=CD1
router[1]=CD2

b[0]=CD2

dhcp\-server[mem]=256
.fi
.RE
.PP
This configuration creates the following network topology,
where \(dqCD1\(dq and \(dqCD2\(dq are collision domains:
.PP
.RS
.nf
                   +\-\-\-\-\-\-\-\-\-\-\-\-+
                   |   router   |
                   +\- 0 \-\-\-\- 1 \-+
                      |      |
+\-\-\-\-\-\-\-\-\-\-\-\-\-+       |      | CD2
| dhcp\-server 0 \-\-\-\-\-\-+      |
+\-\-\-\-\-\-\-\-\-\-\-\-\-+       |       \\    +\-\-\-\-\-\-\-\-\-\-\-\-\-+
                  CD1 |         \-\- 0      b      |
+\-\-\-\-\-\-\-\-\-\-\-\-\-+      /             +\-\-\-\-\-\-\-\-\-\-\-\-\-+
|      a      0 \-\-\-\-
+\-\-\-\-\-\-\-\-\-\-\-\-\-+
.fi
.RE
.PP
The
.I lab.dep
is created to make the launch of \(dqa\(dq and \(dqb\(dq dependent on the
launch of \(dqdhcp\-server\(dq.
Because the network topology dictates that \(dqb\(dq cannot get an address
allocated from the DHCP server until \(dqrouter\(dq is up, there's an
additional dependency for this.
See
.BR lab.dep (5)
for more information on the structure of this file.
.PP
.RS 4
.I lab.dep
.RE
.RS
.nf
a: dhcp\-server
b: dhcp\-server router
.fi
.RE
.RE
.PP
Assuming the lab directory is
.IR /home/netkit/demonstration\-lab/ ,
the lab can now be launched with:
.RS
.TP
.BR lstart " " \c
\-d /home/netkit/demonstration\-lab/
.RE
.PP
Since parallel startup is enabled,
\(dqdhcp\-server\(dq and \(dqrouter\(dq will launch first, together.
Once \(dqdhcp\-server\(dq has finished booting \(dqa\(dq will launch,
however \(dqb\(dq will also have to wait for \(dqrouter\(dq's boot to finish.
.SH AUTHORS
.so include/authors.man
.SH "SEE ALSO"
.BR lclean (1),
.BR lstart (1),
.BR ltest (1),
.BR vstart (1),
.BR lab.dep (5),
.BR netkit.conf (5),
.BR hostname (7),
.BR netkit-jh (7)
